



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.directory
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : chinaopalsearch_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace ChinaOpalSearch
{

/// <summary>
/// EntityID
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class EntityID : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required string Id
    private String m_Id;

    /// <summary>
    /// Id
    /// </summary>
    public String Id
    {
        get { return this.m_Id; }
        set { this.m_Id = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Id_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("EntityID");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ChinaOpalSearch." + meta.name;


            // Id
            Id_meta.name = "Id";
            Id_meta.modifier = global::Microsoft.Bond.Modifier.Required;
            Id_meta.attributes["Index.MetaWord"] = "EntityID";
            Id_meta.attributes["Index.Embedded"] = "";
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Id = 10;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Id = "Id";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public EntityID()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Id = string.Empty;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ChinaOpalSearch.EntityID cloned = new global::ChinaOpalSearch.EntityID();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ChinaOpalSearch.EntityID that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: string Id
        that.Id = this.Id;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Id = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"Id\", id=10");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Id:  // id=10
                    this.Id = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.Id, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.Id))
        {
            ok = false;
            missingFieldName = "Id";
            missingFieldId = __ordinals.Id;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(EntityID))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Id, Schema.Id_meta);
            writer.WriteString(m_Id);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="Id";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.MetaWord"] = "EntityID";
        field.metadata.attributes["Index.Embedded"] = "";

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        EntityID that = obj as EntityID;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(EntityID other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(EntityID that)
    {
        bool equals = true;
        
        equals = equals && ((this.Id == null) == (that.Id == null));
        equals = equals && (this.Id == null ? true : (this.Id.Length == that.Id.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(EntityID that)
    {
        bool equals = true;
        
        equals = equals && (this.Id == null ? true : this.Id == that.Id);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Id, this.Id, separator);
        
        return sb.ToString();
    } // ToString()

}; // class EntityID

/// <summary>
/// Entertainment
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Entertainment : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Optional vector<string> Genres
    private List<String> m_Genres;

    // 20: Optional vector<string> Artists
    private List<String> m_Artists;

    // 30: Optional vector<string> Directors
    private List<String> m_Directors;

    // 40: Optional vector<string> Characters
    private List<String> m_Characters;

    // 50: Optional map<string, string> Performance
    private Dictionary<String, String> m_Performance;

    // 60: Optional vector<string> Distributors
    private List<String> m_Distributors;

    // 70: Optional vector<string> Albums
    private List<String> m_Albums;

    // 80: Optional vector<string> Channels
    private List<String> m_Channels;

    /// <summary>
    /// Genres
    /// </summary>
    public List<String> Genres
    {
        get { return this.m_Genres; }
        set { this.m_Genres = value; }
    }

    /// <summary>
    /// Artists
    /// </summary>
    public List<String> Artists
    {
        get { return this.m_Artists; }
        set { this.m_Artists = value; }
    }

    /// <summary>
    /// Directors
    /// </summary>
    public List<String> Directors
    {
        get { return this.m_Directors; }
        set { this.m_Directors = value; }
    }

    /// <summary>
    /// Characters
    /// </summary>
    public List<String> Characters
    {
        get { return this.m_Characters; }
        set { this.m_Characters = value; }
    }

    /// <summary>
    /// Performance
    /// </summary>
    public Dictionary<String, String> Performance
    {
        get { return this.m_Performance; }
        set { this.m_Performance = value; }
    }

    /// <summary>
    /// Distributors
    /// </summary>
    public List<String> Distributors
    {
        get { return this.m_Distributors; }
        set { this.m_Distributors = value; }
    }

    /// <summary>
    /// Albums
    /// </summary>
    public List<String> Albums
    {
        get { return this.m_Albums; }
        set { this.m_Albums = value; }
    }

    /// <summary>
    /// Channels
    /// </summary>
    public List<String> Channels
    {
        get { return this.m_Channels; }
        set { this.m_Channels = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Genres_meta = new Metadata();
        public static readonly Metadata Artists_meta = new Metadata();
        public static readonly Metadata Directors_meta = new Metadata();
        public static readonly Metadata Characters_meta = new Metadata();
        public static readonly Metadata Performance_meta = new Metadata();
        public static readonly Metadata Distributors_meta = new Metadata();
        public static readonly Metadata Albums_meta = new Metadata();
        public static readonly Metadata Channels_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("Entertainment");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ChinaOpalSearch." + meta.name;


            // Genres
            Genres_meta.name = "Genres";
            Genres_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Genres_meta.attributes["Index.Field"] = "Genres";
            Genres_meta.attributes["Index.MultiStream"] = "Genres";

            // Artists
            Artists_meta.name = "Artists";
            Artists_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Artists_meta.attributes["Index.Field"] = "Artists";
            Artists_meta.attributes["Index.MultiStream"] = "Artists";

            // Directors
            Directors_meta.name = "Directors";
            Directors_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Directors_meta.attributes["Index.Field"] = "Directors";
            Directors_meta.attributes["Index.MultiStream"] = "Directors";

            // Characters
            Characters_meta.name = "Characters";
            Characters_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Characters_meta.attributes["Index.Field"] = "Characters";
            Characters_meta.attributes["Index.MultiStream"] = "Characters";

            // Performance
            Performance_meta.name = "Performance";
            Performance_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Performance_meta.attributes["Index.Field"] = "Performance";
            Performance_meta.attributes["Index.MultiStream"] = "Performance";

            // Distributors
            Distributors_meta.name = "Distributors";
            Distributors_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Distributors_meta.attributes["Index.Field"] = "Distributors";
            Distributors_meta.attributes["Index.MultiStream"] = "Distributors";

            // Albums
            Albums_meta.name = "Albums";
            Albums_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Albums_meta.attributes["Index.Field"] = "Albums";
            Albums_meta.attributes["Index.MultiStream"] = "Albums";

            // Channels
            Channels_meta.name = "Channels";
            Channels_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Channels_meta.attributes["Index.Field"] = "Channels";
            Channels_meta.attributes["Index.MultiStream"] = "Channels";
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Genres = 10;
        public const int Artists = 20;
        public const int Directors = 30;
        public const int Characters = 40;
        public const int Performance = 50;
        public const int Distributors = 60;
        public const int Albums = 70;
        public const int Channels = 80;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Genres = "Genres";
        public const String s_Artists = "Artists";
        public const String s_Directors = "Directors";
        public const String s_Characters = "Characters";
        public const String s_Performance = "Performance";
        public const String s_Distributors = "Distributors";
        public const String s_Albums = "Albums";
        public const String s_Channels = "Channels";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public Entertainment()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_Genres == null)
        {
            m_Genres = new List<String>();
        }
        else
        {
            m_Genres.Clear();
        }
        if (m_Artists == null)
        {
            m_Artists = new List<String>();
        }
        else
        {
            m_Artists.Clear();
        }
        if (m_Directors == null)
        {
            m_Directors = new List<String>();
        }
        else
        {
            m_Directors.Clear();
        }
        if (m_Characters == null)
        {
            m_Characters = new List<String>();
        }
        else
        {
            m_Characters.Clear();
        }
        if (m_Performance == null)
        {
            m_Performance = new Dictionary<String, String>();
        }
        else
        {
            m_Performance.Clear();
        }
        if (m_Distributors == null)
        {
            m_Distributors = new List<String>();
        }
        else
        {
            m_Distributors.Clear();
        }
        if (m_Albums == null)
        {
            m_Albums = new List<String>();
        }
        else
        {
            m_Albums.Clear();
        }
        if (m_Channels == null)
        {
            m_Channels = new List<String>();
        }
        else
        {
            m_Channels.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ChinaOpalSearch.Entertainment cloned = new global::ChinaOpalSearch.Entertainment();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ChinaOpalSearch.Entertainment that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: vector<string> Genres
        if (this.Genres != null)
        {
            if (that.Genres == null)
            {
                that.Genres = new List<String>();
            }
            else
            {
                that.Genres.Clear();
            }
            foreach (var iter1 in this.Genres)
            {
                String tmpItem2 = default(String);
                tmpItem2 = iter1;
                that.Genres.Add(tmpItem2);
            }
        }
        else
        {
            that.Genres = null;
        }
        // 20: vector<string> Artists
        if (this.Artists != null)
        {
            if (that.Artists == null)
            {
                that.Artists = new List<String>();
            }
            else
            {
                that.Artists.Clear();
            }
            foreach (var iter3 in this.Artists)
            {
                String tmpItem4 = default(String);
                tmpItem4 = iter3;
                that.Artists.Add(tmpItem4);
            }
        }
        else
        {
            that.Artists = null;
        }
        // 30: vector<string> Directors
        if (this.Directors != null)
        {
            if (that.Directors == null)
            {
                that.Directors = new List<String>();
            }
            else
            {
                that.Directors.Clear();
            }
            foreach (var iter5 in this.Directors)
            {
                String tmpItem6 = default(String);
                tmpItem6 = iter5;
                that.Directors.Add(tmpItem6);
            }
        }
        else
        {
            that.Directors = null;
        }
        // 40: vector<string> Characters
        if (this.Characters != null)
        {
            if (that.Characters == null)
            {
                that.Characters = new List<String>();
            }
            else
            {
                that.Characters.Clear();
            }
            foreach (var iter7 in this.Characters)
            {
                String tmpItem8 = default(String);
                tmpItem8 = iter7;
                that.Characters.Add(tmpItem8);
            }
        }
        else
        {
            that.Characters = null;
        }
        // 50: map<string, string> Performance
        if (this.Performance != null)
        {
            if (that.Performance == null)
            {
                that.Performance = new Dictionary<String, String>();
            }
            else
            {
                that.Performance.Clear();
            }
            foreach (var keyValPair9 in this.Performance)
            {
                String key10 = default(String);
                String val11 = default(String);
                key10 = keyValPair9.Key;
                val11 = keyValPair9.Value;
                that.Performance[key10] = val11;
            }
        }
        else
        {
            that.Performance = null;
        }
        // 60: vector<string> Distributors
        if (this.Distributors != null)
        {
            if (that.Distributors == null)
            {
                that.Distributors = new List<String>();
            }
            else
            {
                that.Distributors.Clear();
            }
            foreach (var iter12 in this.Distributors)
            {
                String tmpItem13 = default(String);
                tmpItem13 = iter12;
                that.Distributors.Add(tmpItem13);
            }
        }
        else
        {
            that.Distributors = null;
        }
        // 70: vector<string> Albums
        if (this.Albums != null)
        {
            if (that.Albums == null)
            {
                that.Albums = new List<String>();
            }
            else
            {
                that.Albums.Clear();
            }
            foreach (var iter14 in this.Albums)
            {
                String tmpItem15 = default(String);
                tmpItem15 = iter14;
                that.Albums.Add(tmpItem15);
            }
        }
        else
        {
            that.Albums = null;
        }
        // 80: vector<string> Channels
        if (this.Channels != null)
        {
            if (that.Channels == null)
            {
                that.Channels = new List<String>();
            }
            else
            {
                that.Channels.Clear();
            }
            foreach (var iter16 in this.Channels)
            {
                String tmpItem17 = default(String);
                tmpItem17 = iter16;
                that.Channels.Add(tmpItem17);
            }
        }
        else
        {
            that.Channels = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Genres(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Artists(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Directors(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Characters(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Performance(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Distributors(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Albums(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Channels(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Genres:  // id=10
                    this.ReadField_impl_Genres(reader, type);
                    break;
                case __ordinals.Artists:  // id=20
                    this.ReadField_impl_Artists(reader, type);
                    break;
                case __ordinals.Directors:  // id=30
                    this.ReadField_impl_Directors(reader, type);
                    break;
                case __ordinals.Characters:  // id=40
                    this.ReadField_impl_Characters(reader, type);
                    break;
                case __ordinals.Performance:  // id=50
                    this.ReadField_impl_Performance(reader, type);
                    break;
                case __ordinals.Distributors:  // id=60
                    this.ReadField_impl_Distributors(reader, type);
                    break;
                case __ordinals.Albums:  // id=70
                    this.ReadField_impl_Albums(reader, type);
                    break;
                case __ordinals.Channels:  // id=80
                    this.ReadField_impl_Channels(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_Genres(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Genres.Capacity < count2)
        {
            this.m_Genres.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Genres.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Genres


    private void ReadField_impl_Artists(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Artists.Capacity < count2)
        {
            this.m_Artists.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Artists.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Artists


    private void ReadField_impl_Directors(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Directors.Capacity < count2)
        {
            this.m_Directors.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Directors.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Directors


    private void ReadField_impl_Characters(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Characters.Capacity < count2)
        {
            this.m_Characters.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Characters.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Characters


    private void ReadField_impl_Performance(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            String val6 = default(String);
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            val6 = global::Microsoft.Bond.ReadHelper.ReadString(reader, valueType2);
            //
            this.m_Performance[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Performance


    private void ReadField_impl_Distributors(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Distributors.Capacity < count2)
        {
            this.m_Distributors.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Distributors.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Distributors


    private void ReadField_impl_Albums(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Albums.Capacity < count2)
        {
            this.m_Albums.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Albums.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Albums


    private void ReadField_impl_Channels(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Channels.Capacity < count2)
        {
            this.m_Channels.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Channels.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Channels


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(Entertainment))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        UInt32 count1 = ((UInt32)m_Genres.Count);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Genres, Schema.Genres_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx2 = 0; idx2 < count1; idx2++)
            {
                    writer.WriteString(m_Genres[idx2]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Genres, Schema.Genres_meta);
        }

        UInt32 count3 = ((UInt32)m_Artists.Count);
        if (writeAllFields || count3 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Artists, Schema.Artists_meta);
                writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx4 = 0; idx4 < count3; idx4++)
            {
                    writer.WriteString(m_Artists[idx4]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Artists, Schema.Artists_meta);
        }

        UInt32 count5 = ((UInt32)m_Directors.Count);
        if (writeAllFields || count5 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Directors, Schema.Directors_meta);
                writer.WriteContainerBegin(count5, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx6 = 0; idx6 < count5; idx6++)
            {
                    writer.WriteString(m_Directors[idx6]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Directors, Schema.Directors_meta);
        }

        UInt32 count7 = ((UInt32)m_Characters.Count);
        if (writeAllFields || count7 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Characters, Schema.Characters_meta);
                writer.WriteContainerBegin(count7, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx8 = 0; idx8 < count7; idx8++)
            {
                    writer.WriteString(m_Characters[idx8]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Characters, Schema.Characters_meta);
        }

        UInt32 count9 = ((UInt32)m_Performance.Count);
        if (writeAllFields || count9 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.Performance, Schema.Performance_meta);
                writer.WriteContainerBegin(count9, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_STRING);
            foreach (var iter10 in m_Performance)
            {
                // Key
                    writer.WriteString(iter10.Key);
                // Value
                    writer.WriteString(iter10.Value);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.Performance, Schema.Performance_meta);
        }

        UInt32 count11 = ((UInt32)m_Distributors.Count);
        if (writeAllFields || count11 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Distributors, Schema.Distributors_meta);
                writer.WriteContainerBegin(count11, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx12 = 0; idx12 < count11; idx12++)
            {
                    writer.WriteString(m_Distributors[idx12]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Distributors, Schema.Distributors_meta);
        }

        UInt32 count13 = ((UInt32)m_Albums.Count);
        if (writeAllFields || count13 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Albums, Schema.Albums_meta);
                writer.WriteContainerBegin(count13, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx14 = 0; idx14 < count13; idx14++)
            {
                    writer.WriteString(m_Albums[idx14]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Albums, Schema.Albums_meta);
        }

        UInt32 count15 = ((UInt32)m_Channels.Count);
        if (writeAllFields || count15 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Channels, Schema.Channels_meta);
                writer.WriteContainerBegin(count15, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx16 = 0; idx16 < count15; idx16++)
            {
                    writer.WriteString(m_Channels[idx16]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Channels, Schema.Channels_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="Genres";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Genres";
        field.metadata.attributes["Index.MultiStream"] = "Genres";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="Artists";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Artists";
        field.metadata.attributes["Index.MultiStream"] = "Artists";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="Directors";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Directors";
        field.metadata.attributes["Index.MultiStream"] = "Directors";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 40;
        field.metadata.name="Characters";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Characters";
        field.metadata.attributes["Index.MultiStream"] = "Characters";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 50;
        field.metadata.name="Performance";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Performance";
        field.metadata.attributes["Index.MultiStream"] = "Performance";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 60;
        field.metadata.name="Distributors";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Distributors";
        field.metadata.attributes["Index.MultiStream"] = "Distributors";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 70;
        field.metadata.name="Albums";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Albums";
        field.metadata.attributes["Index.MultiStream"] = "Albums";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 80;
        field.metadata.name="Channels";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Channels";
        field.metadata.attributes["Index.MultiStream"] = "Channels";

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Entertainment that = obj as Entertainment;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(Entertainment other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(Entertainment that)
    {
        bool equals = true;
        
        equals = equals && ((this.Genres == null) == (that.Genres == null));
        equals = equals && ((this.Genres == null) ? true : (this.Genres.Count == that.Genres.Count));
        equals = equals && ((this.Artists == null) == (that.Artists == null));
        equals = equals && ((this.Artists == null) ? true : (this.Artists.Count == that.Artists.Count));
        equals = equals && ((this.Directors == null) == (that.Directors == null));
        equals = equals && ((this.Directors == null) ? true : (this.Directors.Count == that.Directors.Count));
        equals = equals && ((this.Characters == null) == (that.Characters == null));
        equals = equals && ((this.Characters == null) ? true : (this.Characters.Count == that.Characters.Count));
        equals = equals && ((this.Performance == null) == (that.Performance == null));
        equals = equals && ((this.Performance == null) ? true : (this.Performance.Count == that.Performance.Count));
        equals = equals && ((this.Distributors == null) == (that.Distributors == null));
        equals = equals && ((this.Distributors == null) ? true : (this.Distributors.Count == that.Distributors.Count));
        equals = equals && ((this.Albums == null) == (that.Albums == null));
        equals = equals && ((this.Albums == null) ? true : (this.Albums.Count == that.Albums.Count));
        equals = equals && ((this.Channels == null) == (that.Channels == null));
        equals = equals && ((this.Channels == null) ? true : (this.Channels.Count == that.Channels.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(Entertainment that)
    {
        bool equals = true;
        
        if (equals && this.Genres != null && this.Genres.Count != 0)
        {
            var enum_1_1 = this.Genres.GetEnumerator();
            var enum_2_2 = that.Genres.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : (enum_1_1.Current.Length == enum_2_2.Current.Length));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current == enum_2_2.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.Artists != null && this.Artists.Count != 0)
        {
            var enum_1_3 = this.Artists.GetEnumerator();
            var enum_2_4 = that.Artists.GetEnumerator();
            while (enum_1_3.MoveNext() && enum_2_4.MoveNext())
            {
                    equals = equals && ((enum_1_3.Current == null) == (enum_2_4.Current == null));
                equals = equals && (enum_1_3.Current == null ? true : (enum_1_3.Current.Length == enum_2_4.Current.Length));
                equals = equals && (enum_1_3.Current == null ? true : enum_1_3.Current == enum_2_4.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.Directors != null && this.Directors.Count != 0)
        {
            var enum_1_5 = this.Directors.GetEnumerator();
            var enum_2_6 = that.Directors.GetEnumerator();
            while (enum_1_5.MoveNext() && enum_2_6.MoveNext())
            {
                    equals = equals && ((enum_1_5.Current == null) == (enum_2_6.Current == null));
                equals = equals && (enum_1_5.Current == null ? true : (enum_1_5.Current.Length == enum_2_6.Current.Length));
                equals = equals && (enum_1_5.Current == null ? true : enum_1_5.Current == enum_2_6.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.Characters != null && this.Characters.Count != 0)
        {
            var enum_1_7 = this.Characters.GetEnumerator();
            var enum_2_8 = that.Characters.GetEnumerator();
            while (enum_1_7.MoveNext() && enum_2_8.MoveNext())
            {
                    equals = equals && ((enum_1_7.Current == null) == (enum_2_8.Current == null));
                equals = equals && (enum_1_7.Current == null ? true : (enum_1_7.Current.Length == enum_2_8.Current.Length));
                equals = equals && (enum_1_7.Current == null ? true : enum_1_7.Current == enum_2_8.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.Performance != null && this.Performance.Count != 0)
        {
            foreach (var keyValPair9 in this.Performance)
            {
                String val10 = default(String);
                equals = equals && that.Performance.TryGetValue(keyValPair9.Key, out val10);
                if (equals)
                {
                        equals = equals && ((val10 == null) == (keyValPair9.Value == null));
                    equals = equals && (val10 == null ? true : (val10.Length == keyValPair9.Value.Length));
                    equals = equals && (val10 == null ? true : val10 == keyValPair9.Value);
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.Distributors != null && this.Distributors.Count != 0)
        {
            var enum_1_11 = this.Distributors.GetEnumerator();
            var enum_2_12 = that.Distributors.GetEnumerator();
            while (enum_1_11.MoveNext() && enum_2_12.MoveNext())
            {
                    equals = equals && ((enum_1_11.Current == null) == (enum_2_12.Current == null));
                equals = equals && (enum_1_11.Current == null ? true : (enum_1_11.Current.Length == enum_2_12.Current.Length));
                equals = equals && (enum_1_11.Current == null ? true : enum_1_11.Current == enum_2_12.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.Albums != null && this.Albums.Count != 0)
        {
            var enum_1_13 = this.Albums.GetEnumerator();
            var enum_2_14 = that.Albums.GetEnumerator();
            while (enum_1_13.MoveNext() && enum_2_14.MoveNext())
            {
                    equals = equals && ((enum_1_13.Current == null) == (enum_2_14.Current == null));
                equals = equals && (enum_1_13.Current == null ? true : (enum_1_13.Current.Length == enum_2_14.Current.Length));
                equals = equals && (enum_1_13.Current == null ? true : enum_1_13.Current == enum_2_14.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.Channels != null && this.Channels.Count != 0)
        {
            var enum_1_15 = this.Channels.GetEnumerator();
            var enum_2_16 = that.Channels.GetEnumerator();
            while (enum_1_15.MoveNext() && enum_2_16.MoveNext())
            {
                    equals = equals && ((enum_1_15.Current == null) == (enum_2_16.Current == null));
                equals = equals && (enum_1_15.Current == null ? true : (enum_1_15.Current.Length == enum_2_16.Current.Length));
                equals = equals && (enum_1_15.Current == null ? true : enum_1_15.Current == enum_2_16.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Genres, DumpList(this.Genres), separator);
        sb.AppendFormat(format, __internal.s_Artists, DumpList(this.Artists), separator);
        sb.AppendFormat(format, __internal.s_Directors, DumpList(this.Directors), separator);
        sb.AppendFormat(format, __internal.s_Characters, DumpList(this.Characters), separator);
        sb.AppendFormat(format, __internal.s_Performance, this.Performance, separator);
        sb.AppendFormat(format, __internal.s_Distributors, DumpList(this.Distributors), separator);
        sb.AppendFormat(format, __internal.s_Albums, DumpList(this.Albums), separator);
        sb.AppendFormat(format, __internal.s_Channels, DumpList(this.Channels), separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class Entertainment

// [Index.DocumentType("ChinaEntity")]
/// <summary>
/// SnappsEntity
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SnappsEntity : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required string Name
    private String m_Name;

    // 12: Optional vector<string> Alias
    private List<String> m_Alias;

    // 14: Optional string KgId
    private String m_KgId;

    // 16: Optional string Description
    private String m_Description;

    // 18: Optional vector<string> Segments
    private List<String> m_Segments;

    // 20: Optional vector<string> Categories
    private List<String> m_Categories;

    // 22: Optional map<string, uint32> IntEmbeddedFilters
    private Dictionary<String, UInt32> m_IntEmbeddedFilters;

    // 24: Optional map<string, uint32> IntFilters
    private Dictionary<String, UInt32> m_IntFilters;

    // 26: Optional vector<uint32> MetaTags
    private List<UInt32> m_MetaTags;

    // 28: Optional map<string, string> Filters
    private Dictionary<String, String> m_Filters;

    // 30: Optional vector<string> Geographies
    private List<String> m_Geographies;

    // 200: Optional uint32 Popularity
    private UInt32 m_Popularity;

    // 202: Optional uint32 RatingCount
    private UInt32 m_RatingCount;

    // 204: Optional uint32 Rating
    private UInt32 m_Rating;

    // 206: Optional uint32 ReviewCount
    private UInt32 m_ReviewCount;

    // 208: Optional uint32 VisitCount
    private UInt32 m_VisitCount;

    // 210: Optional uint32 Rank
    private UInt32 m_Rank;

    // 212: Optional uint32 PublishDate
    private UInt32 m_PublishDate;

    // 214: Optional uint32 UpdateDate
    private UInt32 m_UpdateDate;

    // 216: Optional uint32 EndDate
    private UInt32 m_EndDate;

    // 218: Optional uint32 Length
    private UInt32 m_Length;

    // 300: Optional blob CustomData
    private BondBlob m_CustomData;

    // 302: Optional vector<string> Clients
    private List<String> m_Clients;

    // 304: Optional vector<string> Excludes
    private List<String> m_Excludes;

    // 306: Optional string AnswerScenario
    private String m_AnswerScenario;

    // 308: Optional string AnswerServiceName
    private String m_AnswerServiceName;

    // 310: Optional string AnswerVSName
    private String m_AnswerVSName;

    // 312: Optional string AnswerFeedName
    private String m_AnswerFeedName;

    // 314: Optional string UxHit
    private String m_UxHit;

    // 316: Optional string UxSchema
    private String m_UxSchema;

    // 318: Optional uint32 QueryRank
    private UInt32 m_QueryRank;

    // 320: Optional map<string, string> ImageUrls
    private Dictionary<String, String> m_ImageUrls;

    // 322: Optional map<string, string> SourceUrls
    private Dictionary<String, String> m_SourceUrls;

    // 324: Optional string OfficialSite
    private String m_OfficialSite;

    // 326: Optional string Logo
    private String m_Logo;

    // 500: Optional ChinaOpalSearch.Entertainment Entment
    private global::ChinaOpalSearch.Entertainment m_Entment;

    /// <summary>
    /// base Filtering Name
    /// </summary>
    public String Name
    {
        get { return this.m_Name; }
        set { this.m_Name = value; }
    }

    /// <summary>
    /// Alias
    /// </summary>
    public List<String> Alias
    {
        get { return this.m_Alias; }
        set { this.m_Alias = value; }
    }

    /// <summary>
    /// KgId
    /// </summary>
    public String KgId
    {
        get { return this.m_KgId; }
        set { this.m_KgId = value; }
    }

    /// <summary>
    /// Description
    /// </summary>
    public String Description
    {
        get { return this.m_Description; }
        set { this.m_Description = value; }
    }

    /// <summary>
    /// Segments
    /// </summary>
    public List<String> Segments
    {
        get { return this.m_Segments; }
        set { this.m_Segments = value; }
    }

    /// <summary>
    /// Categories
    /// </summary>
    public List<String> Categories
    {
        get { return this.m_Categories; }
        set { this.m_Categories = value; }
    }

    /// <summary>
    /// " _IntFilters_<key>_<value>"   metadata : value.
    /// </summary>
    public Dictionary<String, UInt32> IntEmbeddedFilters
    {
        get { return this.m_IntEmbeddedFilters; }
        set { this.m_IntEmbeddedFilters = value; }
    }

    /// <summary>
    /// " _IntFilters_<key>"   metadata : value.
    /// </summary>
    public Dictionary<String, UInt32> IntFilters
    {
        get { return this.m_IntFilters; }
        set { this.m_IntFilters = value; }
    }

    /// <summary>
    /// custom metaTags " _MetaTags_123"
    /// </summary>
    public List<UInt32> MetaTags
    {
        get { return this.m_MetaTags; }
        set { this.m_MetaTags = value; }
    }

    /// <summary>
    /// custom filters
    /// </summary>
    public Dictionary<String, String> Filters
    {
        get { return this.m_Filters; }
        set { this.m_Filters = value; }
    }

    /// <summary>
    /// Geographies
    /// </summary>
    public List<String> Geographies
    {
        get { return this.m_Geographies; }
        set { this.m_Geographies = value; }
    }

    /// <summary>
    /// Rating & review & date Filtering Popularity
    /// </summary>
    public UInt32 Popularity
    {
        get { return this.m_Popularity; }
        set { this.m_Popularity = value; }
    }

    /// <summary>
    /// RatingCount
    /// </summary>
    public UInt32 RatingCount
    {
        get { return this.m_RatingCount; }
        set { this.m_RatingCount = value; }
    }

    /// <summary>
    /// Rating
    /// </summary>
    public UInt32 Rating
    {
        get { return this.m_Rating; }
        set { this.m_Rating = value; }
    }

    /// <summary>
    /// ReviewCount
    /// </summary>
    public UInt32 ReviewCount
    {
        get { return this.m_ReviewCount; }
        set { this.m_ReviewCount = value; }
    }

    /// <summary>
    /// VisitCount
    /// </summary>
    public UInt32 VisitCount
    {
        get { return this.m_VisitCount; }
        set { this.m_VisitCount = value; }
    }

    /// <summary>
    /// Rank
    /// </summary>
    public UInt32 Rank
    {
        get { return this.m_Rank; }
        set { this.m_Rank = value; }
    }

    /// <summary>
    /// PublishDate
    /// </summary>
    public UInt32 PublishDate
    {
        get { return this.m_PublishDate; }
        set { this.m_PublishDate = value; }
    }

    /// <summary>
    /// UpdateDate
    /// </summary>
    public UInt32 UpdateDate
    {
        get { return this.m_UpdateDate; }
        set { this.m_UpdateDate = value; }
    }

    /// <summary>
    /// EndDate
    /// </summary>
    public UInt32 EndDate
    {
        get { return this.m_EndDate; }
        set { this.m_EndDate = value; }
    }

    /// <summary>
    /// Length
    /// </summary>
    public UInt32 Length
    {
        get { return this.m_Length; }
        set { this.m_Length = value; }
    }

    /// <summary>
    /// answer content answer
    /// </summary>
    public BondBlob CustomData
    {
        get { return this.m_CustomData; }
        set { this.m_CustomData = value; }
    }

    /// <summary>
    /// Clients
    /// </summary>
    public List<String> Clients
    {
        get { return this.m_Clients; }
        set { this.m_Clients = value; }
    }

    /// <summary>
    /// Excludes
    /// </summary>
    public List<String> Excludes
    {
        get { return this.m_Excludes; }
        set { this.m_Excludes = value; }
    }

    /// <summary>
    /// AnswerScenario
    /// </summary>
    public String AnswerScenario
    {
        get { return this.m_AnswerScenario; }
        set { this.m_AnswerScenario = value; }
    }

    /// <summary>
    /// AnswerServiceName
    /// </summary>
    public String AnswerServiceName
    {
        get { return this.m_AnswerServiceName; }
        set { this.m_AnswerServiceName = value; }
    }

    /// <summary>
    /// AnswerVSName
    /// </summary>
    public String AnswerVSName
    {
        get { return this.m_AnswerVSName; }
        set { this.m_AnswerVSName = value; }
    }

    /// <summary>
    /// AnswerFeedName
    /// </summary>
    public String AnswerFeedName
    {
        get { return this.m_AnswerFeedName; }
        set { this.m_AnswerFeedName = value; }
    }

    /// <summary>
    /// UxHit
    /// </summary>
    public String UxHit
    {
        get { return this.m_UxHit; }
        set { this.m_UxHit = value; }
    }

    /// <summary>
    /// UxSchema
    /// </summary>
    public String UxSchema
    {
        get { return this.m_UxSchema; }
        set { this.m_UxSchema = value; }
    }

    /// <summary>
    /// QueryRank
    /// </summary>
    public UInt32 QueryRank
    {
        get { return this.m_QueryRank; }
        set { this.m_QueryRank = value; }
    }

    /// <summary>
    /// ImageUrls
    /// </summary>
    public Dictionary<String, String> ImageUrls
    {
        get { return this.m_ImageUrls; }
        set { this.m_ImageUrls = value; }
    }

    /// <summary>
    /// SourceUrls
    /// </summary>
    public Dictionary<String, String> SourceUrls
    {
        get { return this.m_SourceUrls; }
        set { this.m_SourceUrls = value; }
    }

    /// <summary>
    /// OfficialSite
    /// </summary>
    public String OfficialSite
    {
        get { return this.m_OfficialSite; }
        set { this.m_OfficialSite = value; }
    }

    /// <summary>
    /// Logo
    /// </summary>
    public String Logo
    {
        get { return this.m_Logo; }
        set { this.m_Logo = value; }
    }

    /// <summary>
    /// < 500 for Base class
    /// </summary>
    public global::ChinaOpalSearch.Entertainment Entment
    {
        get { return this.m_Entment; }
        set { this.m_Entment = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Name_meta = new Metadata();
        public static readonly Metadata Alias_meta = new Metadata();
        public static readonly Metadata KgId_meta = new Metadata();
        public static readonly Metadata Description_meta = new Metadata();
        public static readonly Metadata Segments_meta = new Metadata();
        public static readonly Metadata Categories_meta = new Metadata();
        public static readonly Metadata IntEmbeddedFilters_meta = new Metadata();
        public static readonly Metadata IntFilters_meta = new Metadata();
        public static readonly Metadata MetaTags_meta = new Metadata();
        public static readonly Metadata Filters_meta = new Metadata();
        public static readonly Metadata Geographies_meta = new Metadata();
        public static readonly Metadata Popularity_meta = new Metadata();
        public static readonly Metadata RatingCount_meta = new Metadata();
        public static readonly Metadata Rating_meta = new Metadata();
        public static readonly Metadata ReviewCount_meta = new Metadata();
        public static readonly Metadata VisitCount_meta = new Metadata();
        public static readonly Metadata Rank_meta = new Metadata();
        public static readonly Metadata PublishDate_meta = new Metadata();
        public static readonly Metadata UpdateDate_meta = new Metadata();
        public static readonly Metadata EndDate_meta = new Metadata();
        public static readonly Metadata Length_meta = new Metadata();
        public static readonly Metadata CustomData_meta = new Metadata();
        public static readonly Metadata Clients_meta = new Metadata();
        public static readonly Metadata Excludes_meta = new Metadata();
        public static readonly Metadata AnswerScenario_meta = new Metadata();
        public static readonly Metadata AnswerServiceName_meta = new Metadata();
        public static readonly Metadata AnswerVSName_meta = new Metadata();
        public static readonly Metadata AnswerFeedName_meta = new Metadata();
        public static readonly Metadata UxHit_meta = new Metadata();
        public static readonly Metadata UxSchema_meta = new Metadata();
        public static readonly Metadata QueryRank_meta = new Metadata();
        public static readonly Metadata ImageUrls_meta = new Metadata();
        public static readonly Metadata SourceUrls_meta = new Metadata();
        public static readonly Metadata OfficialSite_meta = new Metadata();
        public static readonly Metadata Logo_meta = new Metadata();
        public static readonly Metadata Entment_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SnappsEntity");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ChinaOpalSearch." + meta.name;

            meta.attributes["Index.DocumentType"] = "ChinaEntity";

            // Name
            Name_meta.name = "Name";
            Name_meta.modifier = global::Microsoft.Bond.Modifier.Required;
            Name_meta.attributes["Index.Field"] = "Name";
            Name_meta.attributes["Index.Stream"] = "Name";
            Name_meta.attributes["Index.Customized"] = "PrefixBreaker|Stream:NamePrefix";

            // Alias
            Alias_meta.name = "Alias";
            Alias_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Alias_meta.attributes["Index.Field"] = "Alias";
            Alias_meta.attributes["Index.MultiStream"] = "Alias";

            // KgId
            KgId_meta.name = "KgId";
            KgId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            KgId_meta.attributes["Index.MetaWord"] = "KgId";
            KgId_meta.attributes["Index.Embedded"] = "";

            // Description
            Description_meta.name = "Description";
            Description_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Description_meta.attributes["Index.Stream"] = "Description";

            // Segments
            Segments_meta.name = "Segments";
            Segments_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Segments_meta.attributes["Index.Field"] = "Segments";
            Segments_meta.attributes["Index.MultiMetaWord"] = "Segments|Embedded:0";

            // Categories
            Categories_meta.name = "Categories";
            Categories_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Categories_meta.attributes["Index.Field"] = "Categories";
            Categories_meta.attributes["Index.MultiMetaWord"] = "Categories|Embedded:0";

            // IntEmbeddedFilters
            IntEmbeddedFilters_meta.name = "IntEmbeddedFilters";
            IntEmbeddedFilters_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            IntEmbeddedFilters_meta.attributes["Index.MultiMetaWord"] = "IntEmbeddedFilters|Embedded:0";

            // IntFilters
            IntFilters_meta.name = "IntFilters";
            IntFilters_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            IntFilters_meta.attributes["Index.MultiMetaWord"] = "IntFilters";

            // MetaTags
            MetaTags_meta.name = "MetaTags";
            MetaTags_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            MetaTags_meta.attributes["Index.MultiMetaWord"] = "MetaTags|Embedded:0";

            // Filters
            Filters_meta.name = "Filters";
            Filters_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Filters_meta.attributes["Index.Field"] = "Entityfilters";
            Filters_meta.attributes["Index.MultiStream"] = "Streamfilters";

            // Geographies
            Geographies_meta.name = "Geographies";
            Geographies_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Geographies_meta.attributes["Index.Field"] = "Geographies";

            // Popularity
            Popularity_meta.name = "Popularity";
            Popularity_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Popularity_meta.attributes["Index.MetaWord"] = "Popularity";

            Popularity_meta.default_value.uint_value = 0;

            // RatingCount
            RatingCount_meta.name = "RatingCount";
            RatingCount_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            RatingCount_meta.attributes["Index.MetaWord"] = "RatingCount";

            RatingCount_meta.default_value.uint_value = 0;

            // Rating
            Rating_meta.name = "Rating";
            Rating_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Rating_meta.attributes["Index.MetaWord"] = "Rating";

            Rating_meta.default_value.uint_value = 0;

            // ReviewCount
            ReviewCount_meta.name = "ReviewCount";
            ReviewCount_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            ReviewCount_meta.attributes["Index.MetaWord"] = "ReviewCount";

            ReviewCount_meta.default_value.uint_value = 0;

            // VisitCount
            VisitCount_meta.name = "VisitCount";
            VisitCount_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            VisitCount_meta.attributes["Index.MetaWord"] = "VisitCount";

            VisitCount_meta.default_value.uint_value = 0;

            // Rank
            Rank_meta.name = "Rank";
            Rank_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Rank_meta.attributes["Index.MetaWord"] = "Rank";

            Rank_meta.default_value.uint_value = 0;

            // PublishDate
            PublishDate_meta.name = "PublishDate";
            PublishDate_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            PublishDate_meta.attributes["Index.MetaWord"] = "PublishDate";

            PublishDate_meta.default_value.uint_value = 0;

            // UpdateDate
            UpdateDate_meta.name = "UpdateDate";
            UpdateDate_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            UpdateDate_meta.attributes["Index.MetaWord"] = "UpdateDate";

            UpdateDate_meta.default_value.uint_value = 0;

            // EndDate
            EndDate_meta.name = "EndDate";
            EndDate_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            EndDate_meta.attributes["Index.MetaWord"] = "EndDate";

            EndDate_meta.default_value.uint_value = 0;

            // Length
            Length_meta.name = "Length";
            Length_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Length_meta.attributes["Index.MetaWord"] = "Length";

            Length_meta.default_value.uint_value = 0;

            // CustomData
            CustomData_meta.name = "CustomData";
            CustomData_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Clients
            Clients_meta.name = "Clients";
            Clients_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Clients_meta.attributes["Index.MultiMetaWord"] = "Clients|Embedded:0";

            // Excludes
            Excludes_meta.name = "Excludes";
            Excludes_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AnswerScenario
            AnswerScenario_meta.name = "AnswerScenario";
            AnswerScenario_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AnswerServiceName
            AnswerServiceName_meta.name = "AnswerServiceName";
            AnswerServiceName_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AnswerVSName
            AnswerVSName_meta.name = "AnswerVSName";
            AnswerVSName_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // AnswerFeedName
            AnswerFeedName_meta.name = "AnswerFeedName";
            AnswerFeedName_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // UxHit
            UxHit_meta.name = "UxHit";
            UxHit_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // UxSchema
            UxSchema_meta.name = "UxSchema";
            UxSchema_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // QueryRank
            QueryRank_meta.name = "QueryRank";
            QueryRank_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            QueryRank_meta.attributes["Index.StaticRank"] = "";
            QueryRank_meta.attributes["Index.MetaWord"] = "StaticRank";

            QueryRank_meta.default_value.uint_value = 0;

            // ImageUrls
            ImageUrls_meta.name = "ImageUrls";
            ImageUrls_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // SourceUrls
            SourceUrls_meta.name = "SourceUrls";
            SourceUrls_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // OfficialSite
            OfficialSite_meta.name = "OfficialSite";
            OfficialSite_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Logo
            Logo_meta.name = "Logo";
            Logo_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // Entment
            Entment_meta.name = "Entment";
            Entment_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            Entment_meta.attributes["Index.Default"] = "";
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Name = 10;
        public const int Alias = 12;
        public const int KgId = 14;
        public const int Description = 16;
        public const int Segments = 18;
        public const int Categories = 20;
        public const int IntEmbeddedFilters = 22;
        public const int IntFilters = 24;
        public const int MetaTags = 26;
        public const int Filters = 28;
        public const int Geographies = 30;
        public const int Popularity = 200;
        public const int RatingCount = 202;
        public const int Rating = 204;
        public const int ReviewCount = 206;
        public const int VisitCount = 208;
        public const int Rank = 210;
        public const int PublishDate = 212;
        public const int UpdateDate = 214;
        public const int EndDate = 216;
        public const int Length = 218;
        public const int CustomData = 300;
        public const int Clients = 302;
        public const int Excludes = 304;
        public const int AnswerScenario = 306;
        public const int AnswerServiceName = 308;
        public const int AnswerVSName = 310;
        public const int AnswerFeedName = 312;
        public const int UxHit = 314;
        public const int UxSchema = 316;
        public const int QueryRank = 318;
        public const int ImageUrls = 320;
        public const int SourceUrls = 322;
        public const int OfficialSite = 324;
        public const int Logo = 326;
        public const int Entment = 500;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Name = "Name";
        public const String s_Alias = "Alias";
        public const String s_KgId = "KgId";
        public const String s_Description = "Description";
        public const String s_Segments = "Segments";
        public const String s_Categories = "Categories";
        public const String s_IntEmbeddedFilters = "IntEmbeddedFilters";
        public const String s_IntFilters = "IntFilters";
        public const String s_MetaTags = "MetaTags";
        public const String s_Filters = "Filters";
        public const String s_Geographies = "Geographies";
        public const String s_Popularity = "Popularity";
        public const String s_RatingCount = "RatingCount";
        public const String s_Rating = "Rating";
        public const String s_ReviewCount = "ReviewCount";
        public const String s_VisitCount = "VisitCount";
        public const String s_Rank = "Rank";
        public const String s_PublishDate = "PublishDate";
        public const String s_UpdateDate = "UpdateDate";
        public const String s_EndDate = "EndDate";
        public const String s_Length = "Length";
        public const String s_CustomData = "CustomData";
        public const String s_Clients = "Clients";
        public const String s_Excludes = "Excludes";
        public const String s_AnswerScenario = "AnswerScenario";
        public const String s_AnswerServiceName = "AnswerServiceName";
        public const String s_AnswerVSName = "AnswerVSName";
        public const String s_AnswerFeedName = "AnswerFeedName";
        public const String s_UxHit = "UxHit";
        public const String s_UxSchema = "UxSchema";
        public const String s_QueryRank = "QueryRank";
        public const String s_ImageUrls = "ImageUrls";
        public const String s_SourceUrls = "SourceUrls";
        public const String s_OfficialSite = "OfficialSite";
        public const String s_Logo = "Logo";
        public const String s_Entment = "Entment";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public SnappsEntity()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Name = string.Empty;
        if (m_Alias == null)
        {
            m_Alias = new List<String>();
        }
        else
        {
            m_Alias.Clear();
        }
        m_KgId = string.Empty;
        m_Description = string.Empty;
        if (m_Segments == null)
        {
            m_Segments = new List<String>();
        }
        else
        {
            m_Segments.Clear();
        }
        if (m_Categories == null)
        {
            m_Categories = new List<String>();
        }
        else
        {
            m_Categories.Clear();
        }
        if (m_IntEmbeddedFilters == null)
        {
            m_IntEmbeddedFilters = new Dictionary<String, UInt32>();
        }
        else
        {
            m_IntEmbeddedFilters.Clear();
        }
        if (m_IntFilters == null)
        {
            m_IntFilters = new Dictionary<String, UInt32>();
        }
        else
        {
            m_IntFilters.Clear();
        }
        if (m_MetaTags == null)
        {
            m_MetaTags = new List<UInt32>();
        }
        else
        {
            m_MetaTags.Clear();
        }
        if (m_Filters == null)
        {
            m_Filters = new Dictionary<String, String>();
        }
        else
        {
            m_Filters.Clear();
        }
        if (m_Geographies == null)
        {
            m_Geographies = new List<String>();
        }
        else
        {
            m_Geographies.Clear();
        }
        m_Popularity = 0;
        m_RatingCount = 0;
        m_Rating = 0;
        m_ReviewCount = 0;
        m_VisitCount = 0;
        m_Rank = 0;
        m_PublishDate = 0;
        m_UpdateDate = 0;
        m_EndDate = 0;
        m_Length = 0;
        m_CustomData = new BondBlob();
        if (m_Clients == null)
        {
            m_Clients = new List<String>();
        }
        else
        {
            m_Clients.Clear();
        }
        if (m_Excludes == null)
        {
            m_Excludes = new List<String>();
        }
        else
        {
            m_Excludes.Clear();
        }
        m_AnswerScenario = string.Empty;
        m_AnswerServiceName = string.Empty;
        m_AnswerVSName = string.Empty;
        m_AnswerFeedName = string.Empty;
        m_UxHit = string.Empty;
        m_UxSchema = string.Empty;
        m_QueryRank = 0;
        if (m_ImageUrls == null)
        {
            m_ImageUrls = new Dictionary<String, String>();
        }
        else
        {
            m_ImageUrls.Clear();
        }
        if (m_SourceUrls == null)
        {
            m_SourceUrls = new Dictionary<String, String>();
        }
        else
        {
            m_SourceUrls.Clear();
        }
        m_OfficialSite = string.Empty;
        m_Logo = string.Empty;
        m_Entment = new global::ChinaOpalSearch.Entertainment();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ChinaOpalSearch.SnappsEntity cloned = new global::ChinaOpalSearch.SnappsEntity();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ChinaOpalSearch.SnappsEntity that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: string Name
        that.Name = this.Name;
        // 12: vector<string> Alias
        if (this.Alias != null)
        {
            if (that.Alias == null)
            {
                that.Alias = new List<String>();
            }
            else
            {
                that.Alias.Clear();
            }
            foreach (var iter1 in this.Alias)
            {
                String tmpItem2 = default(String);
                tmpItem2 = iter1;
                that.Alias.Add(tmpItem2);
            }
        }
        else
        {
            that.Alias = null;
        }
        // 14: string KgId
        that.KgId = this.KgId;
        // 16: string Description
        that.Description = this.Description;
        // 18: vector<string> Segments
        if (this.Segments != null)
        {
            if (that.Segments == null)
            {
                that.Segments = new List<String>();
            }
            else
            {
                that.Segments.Clear();
            }
            foreach (var iter3 in this.Segments)
            {
                String tmpItem4 = default(String);
                tmpItem4 = iter3;
                that.Segments.Add(tmpItem4);
            }
        }
        else
        {
            that.Segments = null;
        }
        // 20: vector<string> Categories
        if (this.Categories != null)
        {
            if (that.Categories == null)
            {
                that.Categories = new List<String>();
            }
            else
            {
                that.Categories.Clear();
            }
            foreach (var iter5 in this.Categories)
            {
                String tmpItem6 = default(String);
                tmpItem6 = iter5;
                that.Categories.Add(tmpItem6);
            }
        }
        else
        {
            that.Categories = null;
        }
        // 22: map<string, uint32> IntEmbeddedFilters
        if (this.IntEmbeddedFilters != null)
        {
            if (that.IntEmbeddedFilters == null)
            {
                that.IntEmbeddedFilters = new Dictionary<String, UInt32>();
            }
            else
            {
                that.IntEmbeddedFilters.Clear();
            }
            foreach (var keyValPair7 in this.IntEmbeddedFilters)
            {
                String key8 = default(String);
                UInt32 val9 = default(UInt32);
                key8 = keyValPair7.Key;
                val9 = keyValPair7.Value;
                that.IntEmbeddedFilters[key8] = val9;
            }
        }
        else
        {
            that.IntEmbeddedFilters = null;
        }
        // 24: map<string, uint32> IntFilters
        if (this.IntFilters != null)
        {
            if (that.IntFilters == null)
            {
                that.IntFilters = new Dictionary<String, UInt32>();
            }
            else
            {
                that.IntFilters.Clear();
            }
            foreach (var keyValPair10 in this.IntFilters)
            {
                String key11 = default(String);
                UInt32 val12 = default(UInt32);
                key11 = keyValPair10.Key;
                val12 = keyValPair10.Value;
                that.IntFilters[key11] = val12;
            }
        }
        else
        {
            that.IntFilters = null;
        }
        // 26: vector<uint32> MetaTags
        if (this.MetaTags != null)
        {
            if (that.MetaTags == null)
            {
                that.MetaTags = new List<UInt32>();
            }
            else
            {
                that.MetaTags.Clear();
            }
            foreach (var iter13 in this.MetaTags)
            {
                UInt32 tmpItem14 = default(UInt32);
                tmpItem14 = iter13;
                that.MetaTags.Add(tmpItem14);
            }
        }
        else
        {
            that.MetaTags = null;
        }
        // 28: map<string, string> Filters
        if (this.Filters != null)
        {
            if (that.Filters == null)
            {
                that.Filters = new Dictionary<String, String>();
            }
            else
            {
                that.Filters.Clear();
            }
            foreach (var keyValPair15 in this.Filters)
            {
                String key16 = default(String);
                String val17 = default(String);
                key16 = keyValPair15.Key;
                val17 = keyValPair15.Value;
                that.Filters[key16] = val17;
            }
        }
        else
        {
            that.Filters = null;
        }
        // 30: vector<string> Geographies
        if (this.Geographies != null)
        {
            if (that.Geographies == null)
            {
                that.Geographies = new List<String>();
            }
            else
            {
                that.Geographies.Clear();
            }
            foreach (var iter18 in this.Geographies)
            {
                String tmpItem19 = default(String);
                tmpItem19 = iter18;
                that.Geographies.Add(tmpItem19);
            }
        }
        else
        {
            that.Geographies = null;
        }
        // 200: uint32 Popularity
        that.Popularity = this.Popularity;
        // 202: uint32 RatingCount
        that.RatingCount = this.RatingCount;
        // 204: uint32 Rating
        that.Rating = this.Rating;
        // 206: uint32 ReviewCount
        that.ReviewCount = this.ReviewCount;
        // 208: uint32 VisitCount
        that.VisitCount = this.VisitCount;
        // 210: uint32 Rank
        that.Rank = this.Rank;
        // 212: uint32 PublishDate
        that.PublishDate = this.PublishDate;
        // 214: uint32 UpdateDate
        that.UpdateDate = this.UpdateDate;
        // 216: uint32 EndDate
        that.EndDate = this.EndDate;
        // 218: uint32 Length
        that.Length = this.Length;
        // 300: blob CustomData
        that.CustomData = this.CustomData.CloneData();
        // 302: vector<string> Clients
        if (this.Clients != null)
        {
            if (that.Clients == null)
            {
                that.Clients = new List<String>();
            }
            else
            {
                that.Clients.Clear();
            }
            foreach (var iter20 in this.Clients)
            {
                String tmpItem21 = default(String);
                tmpItem21 = iter20;
                that.Clients.Add(tmpItem21);
            }
        }
        else
        {
            that.Clients = null;
        }
        // 304: vector<string> Excludes
        if (this.Excludes != null)
        {
            if (that.Excludes == null)
            {
                that.Excludes = new List<String>();
            }
            else
            {
                that.Excludes.Clear();
            }
            foreach (var iter22 in this.Excludes)
            {
                String tmpItem23 = default(String);
                tmpItem23 = iter22;
                that.Excludes.Add(tmpItem23);
            }
        }
        else
        {
            that.Excludes = null;
        }
        // 306: string AnswerScenario
        that.AnswerScenario = this.AnswerScenario;
        // 308: string AnswerServiceName
        that.AnswerServiceName = this.AnswerServiceName;
        // 310: string AnswerVSName
        that.AnswerVSName = this.AnswerVSName;
        // 312: string AnswerFeedName
        that.AnswerFeedName = this.AnswerFeedName;
        // 314: string UxHit
        that.UxHit = this.UxHit;
        // 316: string UxSchema
        that.UxSchema = this.UxSchema;
        // 318: uint32 QueryRank
        that.QueryRank = this.QueryRank;
        // 320: map<string, string> ImageUrls
        if (this.ImageUrls != null)
        {
            if (that.ImageUrls == null)
            {
                that.ImageUrls = new Dictionary<String, String>();
            }
            else
            {
                that.ImageUrls.Clear();
            }
            foreach (var keyValPair24 in this.ImageUrls)
            {
                String key25 = default(String);
                String val26 = default(String);
                key25 = keyValPair24.Key;
                val26 = keyValPair24.Value;
                that.ImageUrls[key25] = val26;
            }
        }
        else
        {
            that.ImageUrls = null;
        }
        // 322: map<string, string> SourceUrls
        if (this.SourceUrls != null)
        {
            if (that.SourceUrls == null)
            {
                that.SourceUrls = new Dictionary<String, String>();
            }
            else
            {
                that.SourceUrls.Clear();
            }
            foreach (var keyValPair27 in this.SourceUrls)
            {
                String key28 = default(String);
                String val29 = default(String);
                key28 = keyValPair27.Key;
                val29 = keyValPair27.Value;
                that.SourceUrls[key28] = val29;
            }
        }
        else
        {
            that.SourceUrls = null;
        }
        // 324: string OfficialSite
        that.OfficialSite = this.OfficialSite;
        // 326: string Logo
        that.Logo = this.Logo;
        // 500: ChinaOpalSearch.Entertainment Entment
        that.Entment = (this.Entment == null ? null : (global::ChinaOpalSearch.Entertainment)this.Entment.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Name = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"Name\", id=10");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Alias(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.KgId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Description = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Segments(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Categories(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_IntEmbeddedFilters(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_IntFilters(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_MetaTags(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Filters(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Geographies(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Popularity = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.RatingCount = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Rating = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReviewCount = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.VisitCount = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Rank = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PublishDate = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.UpdateDate = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.EndDate = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Length = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.CustomData = this.CustomData.FromData(global::Microsoft.Bond.ReadHelper.ReadBlob(reader, global::Microsoft.Bond.BondDataType.BT_LIST));
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Clients(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Excludes(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AnswerScenario = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AnswerServiceName = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AnswerVSName = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AnswerFeedName = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.UxHit = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.UxSchema = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.QueryRank = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ImageUrls(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_SourceUrls(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.OfficialSite = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Logo = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Entment.Read(reader);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Name:  // id=10
                    this.Name = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.Name, true);
                    break;
                case __ordinals.Alias:  // id=12
                    this.ReadField_impl_Alias(reader, type);
                    break;
                case __ordinals.KgId:  // id=14
                    this.KgId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Description:  // id=16
                    this.Description = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Segments:  // id=18
                    this.ReadField_impl_Segments(reader, type);
                    break;
                case __ordinals.Categories:  // id=20
                    this.ReadField_impl_Categories(reader, type);
                    break;
                case __ordinals.IntEmbeddedFilters:  // id=22
                    this.ReadField_impl_IntEmbeddedFilters(reader, type);
                    break;
                case __ordinals.IntFilters:  // id=24
                    this.ReadField_impl_IntFilters(reader, type);
                    break;
                case __ordinals.MetaTags:  // id=26
                    this.ReadField_impl_MetaTags(reader, type);
                    break;
                case __ordinals.Filters:  // id=28
                    this.ReadField_impl_Filters(reader, type);
                    break;
                case __ordinals.Geographies:  // id=30
                    this.ReadField_impl_Geographies(reader, type);
                    break;
                case __ordinals.Popularity:  // id=200
                    this.Popularity = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.RatingCount:  // id=202
                    this.RatingCount = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.Rating:  // id=204
                    this.Rating = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.ReviewCount:  // id=206
                    this.ReviewCount = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.VisitCount:  // id=208
                    this.VisitCount = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.Rank:  // id=210
                    this.Rank = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.PublishDate:  // id=212
                    this.PublishDate = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.UpdateDate:  // id=214
                    this.UpdateDate = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.EndDate:  // id=216
                    this.EndDate = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.Length:  // id=218
                    this.Length = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.CustomData:  // id=300
                    this.CustomData = global::Microsoft.Bond.ReadHelper.ReadBlob(reader, type);
                    break;
                case __ordinals.Clients:  // id=302
                    this.ReadField_impl_Clients(reader, type);
                    break;
                case __ordinals.Excludes:  // id=304
                    this.ReadField_impl_Excludes(reader, type);
                    break;
                case __ordinals.AnswerScenario:  // id=306
                    this.AnswerScenario = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.AnswerServiceName:  // id=308
                    this.AnswerServiceName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.AnswerVSName:  // id=310
                    this.AnswerVSName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.AnswerFeedName:  // id=312
                    this.AnswerFeedName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.UxHit:  // id=314
                    this.UxHit = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.UxSchema:  // id=316
                    this.UxSchema = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.QueryRank:  // id=318
                    this.QueryRank = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.ImageUrls:  // id=320
                    this.ReadField_impl_ImageUrls(reader, type);
                    break;
                case __ordinals.SourceUrls:  // id=322
                    this.ReadField_impl_SourceUrls(reader, type);
                    break;
                case __ordinals.OfficialSite:  // id=324
                    this.OfficialSite = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Logo:  // id=326
                    this.Logo = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Entment:  // id=500
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.Entment.Read(reader);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_Alias(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Alias.Capacity < count2)
        {
            this.m_Alias.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Alias.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Alias


    private void ReadField_impl_Segments(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Segments.Capacity < count2)
        {
            this.m_Segments.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Segments.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Segments


    private void ReadField_impl_Categories(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Categories.Capacity < count2)
        {
            this.m_Categories.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Categories.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Categories


    private void ReadField_impl_IntEmbeddedFilters(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            UInt32 val6 = default(UInt32);
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            val6 = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, valueType2);
            //
            this.m_IntEmbeddedFilters[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_IntEmbeddedFilters


    private void ReadField_impl_IntFilters(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            UInt32 val6 = default(UInt32);
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            val6 = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, valueType2);
            //
            this.m_IntFilters[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_IntFilters


    private void ReadField_impl_MetaTags(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_MetaTags.Capacity < count2)
        {
            this.m_MetaTags.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            UInt32 element3 = default(UInt32);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, elemType1);
            this.m_MetaTags.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_MetaTags


    private void ReadField_impl_Filters(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            String val6 = default(String);
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            val6 = global::Microsoft.Bond.ReadHelper.ReadString(reader, valueType2);
            //
            this.m_Filters[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Filters


    private void ReadField_impl_Geographies(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Geographies.Capacity < count2)
        {
            this.m_Geographies.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Geographies.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Geographies


    private void ReadField_impl_Clients(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Clients.Capacity < count2)
        {
            this.m_Clients.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Clients.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Clients


    private void ReadField_impl_Excludes(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_Excludes.Capacity < count2)
        {
            this.m_Excludes.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_Excludes.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Excludes


    private void ReadField_impl_ImageUrls(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            String val6 = default(String);
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            val6 = global::Microsoft.Bond.ReadHelper.ReadString(reader, valueType2);
            //
            this.m_ImageUrls[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ImageUrls


    private void ReadField_impl_SourceUrls(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            String val6 = default(String);
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            val6 = global::Microsoft.Bond.ReadHelper.ReadString(reader, valueType2);
            //
            this.m_SourceUrls[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_SourceUrls


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.Name))
        {
            ok = false;
            missingFieldName = "Name";
            missingFieldId = __ordinals.Name;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SnappsEntity))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Name, Schema.Name_meta);
            writer.WriteString(m_Name);
        writer.WriteFieldEnd();
        UInt32 count1 = ((UInt32)m_Alias.Count);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Alias, Schema.Alias_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx2 = 0; idx2 < count1; idx2++)
            {
                    writer.WriteString(m_Alias[idx2]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Alias, Schema.Alias_meta);
        }

        if (writeAllFields || (!Schema.KgId_meta.default_value.Equals(m_KgId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.KgId, Schema.KgId_meta);
                writer.WriteString(m_KgId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.KgId, Schema.KgId_meta);
        }

        if (writeAllFields || (!Schema.Description_meta.default_value.Equals(m_Description)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Description, Schema.Description_meta);
                writer.WriteString(m_Description);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Description, Schema.Description_meta);
        }

        UInt32 count3 = ((UInt32)m_Segments.Count);
        if (writeAllFields || count3 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Segments, Schema.Segments_meta);
                writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx4 = 0; idx4 < count3; idx4++)
            {
                    writer.WriteString(m_Segments[idx4]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Segments, Schema.Segments_meta);
        }

        UInt32 count5 = ((UInt32)m_Categories.Count);
        if (writeAllFields || count5 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Categories, Schema.Categories_meta);
                writer.WriteContainerBegin(count5, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx6 = 0; idx6 < count5; idx6++)
            {
                    writer.WriteString(m_Categories[idx6]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Categories, Schema.Categories_meta);
        }

        UInt32 count7 = ((UInt32)m_IntEmbeddedFilters.Count);
        if (writeAllFields || count7 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.IntEmbeddedFilters, Schema.IntEmbeddedFilters_meta);
                writer.WriteContainerBegin(count7, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_UINT32);
            foreach (var iter8 in m_IntEmbeddedFilters)
            {
                // Key
                    writer.WriteString(iter8.Key);
                // Value
                    writer.WriteUInt32(iter8.Value);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.IntEmbeddedFilters, Schema.IntEmbeddedFilters_meta);
        }

        UInt32 count9 = ((UInt32)m_IntFilters.Count);
        if (writeAllFields || count9 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.IntFilters, Schema.IntFilters_meta);
                writer.WriteContainerBegin(count9, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_UINT32);
            foreach (var iter10 in m_IntFilters)
            {
                // Key
                    writer.WriteString(iter10.Key);
                // Value
                    writer.WriteUInt32(iter10.Value);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.IntFilters, Schema.IntFilters_meta);
        }

        UInt32 count11 = ((UInt32)m_MetaTags.Count);
        if (writeAllFields || count11 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MetaTags, Schema.MetaTags_meta);
                writer.WriteContainerBegin(count11, global::Microsoft.Bond.BondDataType.BT_UINT32);
            for (int idx12 = 0; idx12 < count11; idx12++)
            {
                    writer.WriteUInt32(m_MetaTags[idx12]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.MetaTags, Schema.MetaTags_meta);
        }

        UInt32 count13 = ((UInt32)m_Filters.Count);
        if (writeAllFields || count13 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.Filters, Schema.Filters_meta);
                writer.WriteContainerBegin(count13, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_STRING);
            foreach (var iter14 in m_Filters)
            {
                // Key
                    writer.WriteString(iter14.Key);
                // Value
                    writer.WriteString(iter14.Value);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.Filters, Schema.Filters_meta);
        }

        UInt32 count15 = ((UInt32)m_Geographies.Count);
        if (writeAllFields || count15 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Geographies, Schema.Geographies_meta);
                writer.WriteContainerBegin(count15, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx16 = 0; idx16 < count15; idx16++)
            {
                    writer.WriteString(m_Geographies[idx16]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Geographies, Schema.Geographies_meta);
        }

        if (writeAllFields || (!Schema.Popularity_meta.default_value.Equals(m_Popularity)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.Popularity, Schema.Popularity_meta);
                writer.WriteUInt32(m_Popularity);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.Popularity, Schema.Popularity_meta);
        }

        if (writeAllFields || (!Schema.RatingCount_meta.default_value.Equals(m_RatingCount)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.RatingCount, Schema.RatingCount_meta);
                writer.WriteUInt32(m_RatingCount);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.RatingCount, Schema.RatingCount_meta);
        }

        if (writeAllFields || (!Schema.Rating_meta.default_value.Equals(m_Rating)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.Rating, Schema.Rating_meta);
                writer.WriteUInt32(m_Rating);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.Rating, Schema.Rating_meta);
        }

        if (writeAllFields || (!Schema.ReviewCount_meta.default_value.Equals(m_ReviewCount)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.ReviewCount, Schema.ReviewCount_meta);
                writer.WriteUInt32(m_ReviewCount);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.ReviewCount, Schema.ReviewCount_meta);
        }

        if (writeAllFields || (!Schema.VisitCount_meta.default_value.Equals(m_VisitCount)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.VisitCount, Schema.VisitCount_meta);
                writer.WriteUInt32(m_VisitCount);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.VisitCount, Schema.VisitCount_meta);
        }

        if (writeAllFields || (!Schema.Rank_meta.default_value.Equals(m_Rank)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.Rank, Schema.Rank_meta);
                writer.WriteUInt32(m_Rank);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.Rank, Schema.Rank_meta);
        }

        if (writeAllFields || (!Schema.PublishDate_meta.default_value.Equals(m_PublishDate)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.PublishDate, Schema.PublishDate_meta);
                writer.WriteUInt32(m_PublishDate);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.PublishDate, Schema.PublishDate_meta);
        }

        if (writeAllFields || (!Schema.UpdateDate_meta.default_value.Equals(m_UpdateDate)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.UpdateDate, Schema.UpdateDate_meta);
                writer.WriteUInt32(m_UpdateDate);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.UpdateDate, Schema.UpdateDate_meta);
        }

        if (writeAllFields || (!Schema.EndDate_meta.default_value.Equals(m_EndDate)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.EndDate, Schema.EndDate_meta);
                writer.WriteUInt32(m_EndDate);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.EndDate, Schema.EndDate_meta);
        }

        if (writeAllFields || (!Schema.Length_meta.default_value.Equals(m_Length)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.Length, Schema.Length_meta);
                writer.WriteUInt32(m_Length);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.Length, Schema.Length_meta);
        }

        UInt32 count17 = (m_CustomData.GetCount());
        if (writeAllFields || count17 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CustomData, Schema.CustomData_meta);
                writer.WriteContainerBegin(count17, BondDataType.BT_INT8);
            writer.WriteBlob(m_CustomData.GetData());
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.CustomData, Schema.CustomData_meta);
        }

        UInt32 count18 = ((UInt32)m_Clients.Count);
        if (writeAllFields || count18 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Clients, Schema.Clients_meta);
                writer.WriteContainerBegin(count18, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx19 = 0; idx19 < count18; idx19++)
            {
                    writer.WriteString(m_Clients[idx19]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Clients, Schema.Clients_meta);
        }

        UInt32 count20 = ((UInt32)m_Excludes.Count);
        if (writeAllFields || count20 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Excludes, Schema.Excludes_meta);
                writer.WriteContainerBegin(count20, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx21 = 0; idx21 < count20; idx21++)
            {
                    writer.WriteString(m_Excludes[idx21]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Excludes, Schema.Excludes_meta);
        }

        if (writeAllFields || (!Schema.AnswerScenario_meta.default_value.Equals(m_AnswerScenario)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AnswerScenario, Schema.AnswerScenario_meta);
                writer.WriteString(m_AnswerScenario);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AnswerScenario, Schema.AnswerScenario_meta);
        }

        if (writeAllFields || (!Schema.AnswerServiceName_meta.default_value.Equals(m_AnswerServiceName)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AnswerServiceName, Schema.AnswerServiceName_meta);
                writer.WriteString(m_AnswerServiceName);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AnswerServiceName, Schema.AnswerServiceName_meta);
        }

        if (writeAllFields || (!Schema.AnswerVSName_meta.default_value.Equals(m_AnswerVSName)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AnswerVSName, Schema.AnswerVSName_meta);
                writer.WriteString(m_AnswerVSName);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AnswerVSName, Schema.AnswerVSName_meta);
        }

        if (writeAllFields || (!Schema.AnswerFeedName_meta.default_value.Equals(m_AnswerFeedName)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AnswerFeedName, Schema.AnswerFeedName_meta);
                writer.WriteString(m_AnswerFeedName);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AnswerFeedName, Schema.AnswerFeedName_meta);
        }

        if (writeAllFields || (!Schema.UxHit_meta.default_value.Equals(m_UxHit)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.UxHit, Schema.UxHit_meta);
                writer.WriteString(m_UxHit);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.UxHit, Schema.UxHit_meta);
        }

        if (writeAllFields || (!Schema.UxSchema_meta.default_value.Equals(m_UxSchema)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.UxSchema, Schema.UxSchema_meta);
                writer.WriteString(m_UxSchema);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.UxSchema, Schema.UxSchema_meta);
        }

        if (writeAllFields || (!Schema.QueryRank_meta.default_value.Equals(m_QueryRank)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.QueryRank, Schema.QueryRank_meta);
                writer.WriteUInt32(m_QueryRank);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.QueryRank, Schema.QueryRank_meta);
        }

        UInt32 count22 = ((UInt32)m_ImageUrls.Count);
        if (writeAllFields || count22 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.ImageUrls, Schema.ImageUrls_meta);
                writer.WriteContainerBegin(count22, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_STRING);
            foreach (var iter23 in m_ImageUrls)
            {
                // Key
                    writer.WriteString(iter23.Key);
                // Value
                    writer.WriteString(iter23.Value);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.ImageUrls, Schema.ImageUrls_meta);
        }

        UInt32 count24 = ((UInt32)m_SourceUrls.Count);
        if (writeAllFields || count24 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.SourceUrls, Schema.SourceUrls_meta);
                writer.WriteContainerBegin(count24, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_STRING);
            foreach (var iter25 in m_SourceUrls)
            {
                // Key
                    writer.WriteString(iter25.Key);
                // Value
                    writer.WriteString(iter25.Value);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.SourceUrls, Schema.SourceUrls_meta);
        }

        if (writeAllFields || (!Schema.OfficialSite_meta.default_value.Equals(m_OfficialSite)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.OfficialSite, Schema.OfficialSite_meta);
                writer.WriteString(m_OfficialSite);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.OfficialSite, Schema.OfficialSite_meta);
        }

        if (writeAllFields || (!Schema.Logo_meta.default_value.Equals(m_Logo)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Logo, Schema.Logo_meta);
                writer.WriteString(m_Logo);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Logo, Schema.Logo_meta);
        }

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.Entment, Schema.Entment_meta);
            m_Entment.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);
        structDef.metadata.attributes["Index.DocumentType"] = "ChinaEntity";

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="Name";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Name";
        field.metadata.attributes["Index.Stream"] = "Name";
        field.metadata.attributes["Index.Customized"] = "PrefixBreaker|Stream:NamePrefix";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 12;
        field.metadata.name="Alias";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Alias";
        field.metadata.attributes["Index.MultiStream"] = "Alias";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 14;
        field.metadata.name="KgId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.MetaWord"] = "KgId";
        field.metadata.attributes["Index.Embedded"] = "";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 16;
        field.metadata.name="Description";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Stream"] = "Description";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 18;
        field.metadata.name="Segments";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Segments";
        field.metadata.attributes["Index.MultiMetaWord"] = "Segments|Embedded:0";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="Categories";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Categories";
        field.metadata.attributes["Index.MultiMetaWord"] = "Categories|Embedded:0";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 22;
        field.metadata.name="IntEmbeddedFilters";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MultiMetaWord"] = "IntEmbeddedFilters|Embedded:0";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 24;
        field.metadata.name="IntFilters";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MultiMetaWord"] = "IntFilters";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 26;
        field.metadata.name="MetaTags";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MultiMetaWord"] = "MetaTags|Embedded:0";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 28;
        field.metadata.name="Filters";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Entityfilters";
        field.metadata.attributes["Index.MultiStream"] = "Streamfilters";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="Geographies";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.Field"] = "Geographies";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 200;
        field.metadata.name="Popularity";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MetaWord"] = "Popularity";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 202;
        field.metadata.name="RatingCount";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MetaWord"] = "RatingCount";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 204;
        field.metadata.name="Rating";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MetaWord"] = "Rating";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 206;
        field.metadata.name="ReviewCount";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MetaWord"] = "ReviewCount";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 208;
        field.metadata.name="VisitCount";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MetaWord"] = "VisitCount";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 210;
        field.metadata.name="Rank";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MetaWord"] = "Rank";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 212;
        field.metadata.name="PublishDate";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MetaWord"] = "PublishDate";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 214;
        field.metadata.name="UpdateDate";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MetaWord"] = "UpdateDate";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 216;
        field.metadata.name="EndDate";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MetaWord"] = "EndDate";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 218;
        field.metadata.name="Length";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.MetaWord"] = "Length";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 300;
        field.metadata.name="CustomData";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 302;
        field.metadata.name="Clients";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.MultiMetaWord"] = "Clients|Embedded:0";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 304;
        field.metadata.name="Excludes";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 306;
        field.metadata.name="AnswerScenario";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 308;
        field.metadata.name="AnswerServiceName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 310;
        field.metadata.name="AnswerVSName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 312;
        field.metadata.name="AnswerFeedName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 314;
        field.metadata.name="UxHit";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 316;
        field.metadata.name="UxSchema";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 318;
        field.metadata.name="QueryRank";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;
        field.metadata.attributes["Index.StaticRank"] = "";
        field.metadata.attributes["Index.MetaWord"] = "StaticRank";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 320;
        field.metadata.name="ImageUrls";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 322;
        field.metadata.name="SourceUrls";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 324;
        field.metadata.name="OfficialSite";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 326;
        field.metadata.name="Logo";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 500;
        field.metadata.name="Entment";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::ChinaOpalSearch.Entertainment.GetTypeDef(schema);
        field.metadata.attributes["Index.Default"] = "";

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SnappsEntity that = obj as SnappsEntity;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(SnappsEntity other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(SnappsEntity that)
    {
        bool equals = true;
        
        equals = equals && ((this.Name == null) == (that.Name == null));
        equals = equals && (this.Name == null ? true : (this.Name.Length == that.Name.Length));
        equals = equals && ((this.Alias == null) == (that.Alias == null));
        equals = equals && ((this.Alias == null) ? true : (this.Alias.Count == that.Alias.Count));
        equals = equals && ((this.KgId == null) == (that.KgId == null));
        equals = equals && (this.KgId == null ? true : (this.KgId.Length == that.KgId.Length));
        equals = equals && ((this.Description == null) == (that.Description == null));
        equals = equals && (this.Description == null ? true : (this.Description.Length == that.Description.Length));
        equals = equals && ((this.Segments == null) == (that.Segments == null));
        equals = equals && ((this.Segments == null) ? true : (this.Segments.Count == that.Segments.Count));
        equals = equals && ((this.Categories == null) == (that.Categories == null));
        equals = equals && ((this.Categories == null) ? true : (this.Categories.Count == that.Categories.Count));
        equals = equals && ((this.IntEmbeddedFilters == null) == (that.IntEmbeddedFilters == null));
        equals = equals && ((this.IntEmbeddedFilters == null) ? true : (this.IntEmbeddedFilters.Count == that.IntEmbeddedFilters.Count));
        equals = equals && ((this.IntFilters == null) == (that.IntFilters == null));
        equals = equals && ((this.IntFilters == null) ? true : (this.IntFilters.Count == that.IntFilters.Count));
        equals = equals && ((this.MetaTags == null) == (that.MetaTags == null));
        equals = equals && ((this.MetaTags == null) ? true : (this.MetaTags.Count == that.MetaTags.Count));
        equals = equals && ((this.Filters == null) == (that.Filters == null));
        equals = equals && ((this.Filters == null) ? true : (this.Filters.Count == that.Filters.Count));
        equals = equals && ((this.Geographies == null) == (that.Geographies == null));
        equals = equals && ((this.Geographies == null) ? true : (this.Geographies.Count == that.Geographies.Count));
        equals = equals && ((this.Popularity == that.Popularity));
        equals = equals && ((this.RatingCount == that.RatingCount));
        equals = equals && ((this.Rating == that.Rating));
        equals = equals && ((this.ReviewCount == that.ReviewCount));
        equals = equals && ((this.VisitCount == that.VisitCount));
        equals = equals && ((this.Rank == that.Rank));
        equals = equals && ((this.PublishDate == that.PublishDate));
        equals = equals && ((this.UpdateDate == that.UpdateDate));
        equals = equals && ((this.EndDate == that.EndDate));
        equals = equals && ((this.Length == that.Length));
        equals = equals && (this.CustomData.GetCount() == that.CustomData.GetCount());
        equals = equals && ((this.Clients == null) == (that.Clients == null));
        equals = equals && ((this.Clients == null) ? true : (this.Clients.Count == that.Clients.Count));
        equals = equals && ((this.Excludes == null) == (that.Excludes == null));
        equals = equals && ((this.Excludes == null) ? true : (this.Excludes.Count == that.Excludes.Count));
        equals = equals && ((this.AnswerScenario == null) == (that.AnswerScenario == null));
        equals = equals && (this.AnswerScenario == null ? true : (this.AnswerScenario.Length == that.AnswerScenario.Length));
        equals = equals && ((this.AnswerServiceName == null) == (that.AnswerServiceName == null));
        equals = equals && (this.AnswerServiceName == null ? true : (this.AnswerServiceName.Length == that.AnswerServiceName.Length));
        equals = equals && ((this.AnswerVSName == null) == (that.AnswerVSName == null));
        equals = equals && (this.AnswerVSName == null ? true : (this.AnswerVSName.Length == that.AnswerVSName.Length));
        equals = equals && ((this.AnswerFeedName == null) == (that.AnswerFeedName == null));
        equals = equals && (this.AnswerFeedName == null ? true : (this.AnswerFeedName.Length == that.AnswerFeedName.Length));
        equals = equals && ((this.UxHit == null) == (that.UxHit == null));
        equals = equals && (this.UxHit == null ? true : (this.UxHit.Length == that.UxHit.Length));
        equals = equals && ((this.UxSchema == null) == (that.UxSchema == null));
        equals = equals && (this.UxSchema == null ? true : (this.UxSchema.Length == that.UxSchema.Length));
        equals = equals && ((this.QueryRank == that.QueryRank));
        equals = equals && ((this.ImageUrls == null) == (that.ImageUrls == null));
        equals = equals && ((this.ImageUrls == null) ? true : (this.ImageUrls.Count == that.ImageUrls.Count));
        equals = equals && ((this.SourceUrls == null) == (that.SourceUrls == null));
        equals = equals && ((this.SourceUrls == null) ? true : (this.SourceUrls.Count == that.SourceUrls.Count));
        equals = equals && ((this.OfficialSite == null) == (that.OfficialSite == null));
        equals = equals && (this.OfficialSite == null ? true : (this.OfficialSite.Length == that.OfficialSite.Length));
        equals = equals && ((this.Logo == null) == (that.Logo == null));
        equals = equals && (this.Logo == null ? true : (this.Logo.Length == that.Logo.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(SnappsEntity that)
    {
        bool equals = true;
        
        equals = equals && (this.Name == null ? true : this.Name == that.Name);
        if (equals && this.Alias != null && this.Alias.Count != 0)
        {
            var enum_1_1 = this.Alias.GetEnumerator();
            var enum_2_2 = that.Alias.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : (enum_1_1.Current.Length == enum_2_2.Current.Length));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current == enum_2_2.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.KgId == null ? true : this.KgId == that.KgId);
        equals = equals && (this.Description == null ? true : this.Description == that.Description);
        if (equals && this.Segments != null && this.Segments.Count != 0)
        {
            var enum_1_3 = this.Segments.GetEnumerator();
            var enum_2_4 = that.Segments.GetEnumerator();
            while (enum_1_3.MoveNext() && enum_2_4.MoveNext())
            {
                    equals = equals && ((enum_1_3.Current == null) == (enum_2_4.Current == null));
                equals = equals && (enum_1_3.Current == null ? true : (enum_1_3.Current.Length == enum_2_4.Current.Length));
                equals = equals && (enum_1_3.Current == null ? true : enum_1_3.Current == enum_2_4.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.Categories != null && this.Categories.Count != 0)
        {
            var enum_1_5 = this.Categories.GetEnumerator();
            var enum_2_6 = that.Categories.GetEnumerator();
            while (enum_1_5.MoveNext() && enum_2_6.MoveNext())
            {
                    equals = equals && ((enum_1_5.Current == null) == (enum_2_6.Current == null));
                equals = equals && (enum_1_5.Current == null ? true : (enum_1_5.Current.Length == enum_2_6.Current.Length));
                equals = equals && (enum_1_5.Current == null ? true : enum_1_5.Current == enum_2_6.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.IntEmbeddedFilters != null && this.IntEmbeddedFilters.Count != 0)
        {
            foreach (var keyValPair7 in this.IntEmbeddedFilters)
            {
                UInt32 val8 = default(UInt32);
                equals = equals && that.IntEmbeddedFilters.TryGetValue(keyValPair7.Key, out val8);
                if (equals)
                {
                        equals = equals && ((val8 == keyValPair7.Value));
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.IntFilters != null && this.IntFilters.Count != 0)
        {
            foreach (var keyValPair9 in this.IntFilters)
            {
                UInt32 val10 = default(UInt32);
                equals = equals && that.IntFilters.TryGetValue(keyValPair9.Key, out val10);
                if (equals)
                {
                        equals = equals && ((val10 == keyValPair9.Value));
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.MetaTags != null && this.MetaTags.Count != 0)
        {
            var enum_1_11 = this.MetaTags.GetEnumerator();
            var enum_2_12 = that.MetaTags.GetEnumerator();
            while (enum_1_11.MoveNext() && enum_2_12.MoveNext())
            {
                    equals = equals && ((enum_1_11.Current == enum_2_12.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.Filters != null && this.Filters.Count != 0)
        {
            foreach (var keyValPair13 in this.Filters)
            {
                String val14 = default(String);
                equals = equals && that.Filters.TryGetValue(keyValPair13.Key, out val14);
                if (equals)
                {
                        equals = equals && ((val14 == null) == (keyValPair13.Value == null));
                    equals = equals && (val14 == null ? true : (val14.Length == keyValPair13.Value.Length));
                    equals = equals && (val14 == null ? true : val14 == keyValPair13.Value);
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.Geographies != null && this.Geographies.Count != 0)
        {
            var enum_1_15 = this.Geographies.GetEnumerator();
            var enum_2_16 = that.Geographies.GetEnumerator();
            while (enum_1_15.MoveNext() && enum_2_16.MoveNext())
            {
                    equals = equals && ((enum_1_15.Current == null) == (enum_2_16.Current == null));
                equals = equals && (enum_1_15.Current == null ? true : (enum_1_15.Current.Length == enum_2_16.Current.Length));
                equals = equals && (enum_1_15.Current == null ? true : enum_1_15.Current == enum_2_16.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && this.CustomData.CompareData(that.CustomData);
        if (equals && this.Clients != null && this.Clients.Count != 0)
        {
            var enum_1_17 = this.Clients.GetEnumerator();
            var enum_2_18 = that.Clients.GetEnumerator();
            while (enum_1_17.MoveNext() && enum_2_18.MoveNext())
            {
                    equals = equals && ((enum_1_17.Current == null) == (enum_2_18.Current == null));
                equals = equals && (enum_1_17.Current == null ? true : (enum_1_17.Current.Length == enum_2_18.Current.Length));
                equals = equals && (enum_1_17.Current == null ? true : enum_1_17.Current == enum_2_18.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.Excludes != null && this.Excludes.Count != 0)
        {
            var enum_1_19 = this.Excludes.GetEnumerator();
            var enum_2_20 = that.Excludes.GetEnumerator();
            while (enum_1_19.MoveNext() && enum_2_20.MoveNext())
            {
                    equals = equals && ((enum_1_19.Current == null) == (enum_2_20.Current == null));
                equals = equals && (enum_1_19.Current == null ? true : (enum_1_19.Current.Length == enum_2_20.Current.Length));
                equals = equals && (enum_1_19.Current == null ? true : enum_1_19.Current == enum_2_20.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.AnswerScenario == null ? true : this.AnswerScenario == that.AnswerScenario);
        equals = equals && (this.AnswerServiceName == null ? true : this.AnswerServiceName == that.AnswerServiceName);
        equals = equals && (this.AnswerVSName == null ? true : this.AnswerVSName == that.AnswerVSName);
        equals = equals && (this.AnswerFeedName == null ? true : this.AnswerFeedName == that.AnswerFeedName);
        equals = equals && (this.UxHit == null ? true : this.UxHit == that.UxHit);
        equals = equals && (this.UxSchema == null ? true : this.UxSchema == that.UxSchema);
        if (equals && this.ImageUrls != null && this.ImageUrls.Count != 0)
        {
            foreach (var keyValPair21 in this.ImageUrls)
            {
                String val22 = default(String);
                equals = equals && that.ImageUrls.TryGetValue(keyValPair21.Key, out val22);
                if (equals)
                {
                        equals = equals && ((val22 == null) == (keyValPair21.Value == null));
                    equals = equals && (val22 == null ? true : (val22.Length == keyValPair21.Value.Length));
                    equals = equals && (val22 == null ? true : val22 == keyValPair21.Value);
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.SourceUrls != null && this.SourceUrls.Count != 0)
        {
            foreach (var keyValPair23 in this.SourceUrls)
            {
                String val24 = default(String);
                equals = equals && that.SourceUrls.TryGetValue(keyValPair23.Key, out val24);
                if (equals)
                {
                        equals = equals && ((val24 == null) == (keyValPair23.Value == null));
                    equals = equals && (val24 == null ? true : (val24.Length == keyValPair23.Value.Length));
                    equals = equals && (val24 == null ? true : val24 == keyValPair23.Value);
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.OfficialSite == null ? true : this.OfficialSite == that.OfficialSite);
        equals = equals && (this.Logo == null ? true : this.Logo == that.Logo);
        equals = equals && (this.Entment == null ? true : this.Entment.MemberwiseCompare(that.Entment));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Name, this.Name, separator);
        sb.AppendFormat(format, __internal.s_Alias, DumpList(this.Alias), separator);
        sb.AppendFormat(format, __internal.s_KgId, this.KgId, separator);
        sb.AppendFormat(format, __internal.s_Description, this.Description, separator);
        sb.AppendFormat(format, __internal.s_Segments, DumpList(this.Segments), separator);
        sb.AppendFormat(format, __internal.s_Categories, DumpList(this.Categories), separator);
        sb.AppendFormat(format, __internal.s_IntEmbeddedFilters, this.IntEmbeddedFilters, separator);
        sb.AppendFormat(format, __internal.s_IntFilters, this.IntFilters, separator);
        sb.AppendFormat(format, __internal.s_MetaTags, DumpList(this.MetaTags), separator);
        sb.AppendFormat(format, __internal.s_Filters, this.Filters, separator);
        sb.AppendFormat(format, __internal.s_Geographies, DumpList(this.Geographies), separator);
        sb.AppendFormat(format, __internal.s_Popularity, this.Popularity, separator);
        sb.AppendFormat(format, __internal.s_RatingCount, this.RatingCount, separator);
        sb.AppendFormat(format, __internal.s_Rating, this.Rating, separator);
        sb.AppendFormat(format, __internal.s_ReviewCount, this.ReviewCount, separator);
        sb.AppendFormat(format, __internal.s_VisitCount, this.VisitCount, separator);
        sb.AppendFormat(format, __internal.s_Rank, this.Rank, separator);
        sb.AppendFormat(format, __internal.s_PublishDate, this.PublishDate, separator);
        sb.AppendFormat(format, __internal.s_UpdateDate, this.UpdateDate, separator);
        sb.AppendFormat(format, __internal.s_EndDate, this.EndDate, separator);
        sb.AppendFormat(format, __internal.s_Length, this.Length, separator);
        sb.AppendFormat(format, __internal.s_CustomData, this.CustomData, separator);
        sb.AppendFormat(format, __internal.s_Clients, DumpList(this.Clients), separator);
        sb.AppendFormat(format, __internal.s_Excludes, DumpList(this.Excludes), separator);
        sb.AppendFormat(format, __internal.s_AnswerScenario, this.AnswerScenario, separator);
        sb.AppendFormat(format, __internal.s_AnswerServiceName, this.AnswerServiceName, separator);
        sb.AppendFormat(format, __internal.s_AnswerVSName, this.AnswerVSName, separator);
        sb.AppendFormat(format, __internal.s_AnswerFeedName, this.AnswerFeedName, separator);
        sb.AppendFormat(format, __internal.s_UxHit, this.UxHit, separator);
        sb.AppendFormat(format, __internal.s_UxSchema, this.UxSchema, separator);
        sb.AppendFormat(format, __internal.s_QueryRank, this.QueryRank, separator);
        sb.AppendFormat(format, __internal.s_ImageUrls, this.ImageUrls, separator);
        sb.AppendFormat(format, __internal.s_SourceUrls, this.SourceUrls, separator);
        sb.AppendFormat(format, __internal.s_OfficialSite, this.OfficialSite, separator);
        sb.AppendFormat(format, __internal.s_Logo, this.Logo, separator);
        sb.AppendFormat(format, __internal.s_Entment, this.Entment, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class SnappsEntity
} // namespace ChinaOpalSearch
